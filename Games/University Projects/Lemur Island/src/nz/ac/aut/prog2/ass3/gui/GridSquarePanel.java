package nz.ac.aut.prog2.ass3.gui;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.io.FileInputStream;
import java.io.IOException;
import javax.imageio.ImageIO;
import nz.ac.aut.prog2.ass3.gameModel.Game;
import nz.ac.aut.prog2.ass3.gameModel.GridSquare;
import nz.ac.aut.prog2.ass3.gameModel.Position;
import nz.ac.aut.prog2.ass3.gameModel.Terrain;

/**
 * GUI for the Lemur Island panel grid.
 * 
 * @author Luke Harper
 * @version Assignment 3 S2 2013
 */
public class GridSquarePanel extends javax.swing.JPanel {

    private Game game;
    private int rows, columns;
    private Image playerImage;
    private Image mountainImage;
    private Image sandImage;
    private Image forestImage;
    private Image waterImage;
    private Image animalImage;
    private Image itemImage;
    
    /**
     * Creates new form GridSquarePanel
     *
     * @param game the game object to display in this panel
     * @param rows the amount of rows on the game grid
     * @param columns the amount of columns on the game grid
     */
    public GridSquarePanel(Game game, int rows, int columns) {
        this.game = game;
        this.rows = rows;
        this.columns = columns;
        try {
            playerImage = ImageIO.read(new FileInputStream("player.gif"));
            playerImage = playerImage.getScaledInstance((int) (playerImage.getWidth(this) * 0.5), (int) (playerImage.getHeight(this) * 0.4), Image.SCALE_SMOOTH);
            mountainImage = ImageIO.read(new FileInputStream("mountain.png"));
            mountainImage = mountainImage.getScaledInstance(70, 50, Image.SCALE_SMOOTH);
            sandImage = ImageIO.read(new FileInputStream("sand.png"));
            sandImage = sandImage.getScaledInstance(70, 50, Image.SCALE_SMOOTH);
            waterImage = ImageIO.read(new FileInputStream("water.png"));
            waterImage = waterImage.getScaledInstance(70, 50, Image.SCALE_SMOOTH);
            forestImage = ImageIO.read(new FileInputStream("forest.png"));
            forestImage = forestImage.getScaledInstance(70, 50, Image.SCALE_SMOOTH);
            animalImage = ImageIO.read(new FileInputStream("animal.png"));
            animalImage = animalImage.getScaledInstance(60, 50, Image.SCALE_SMOOTH);
            itemImage = ImageIO.read(new FileInputStream("item.png"));
            itemImage = itemImage.getScaledInstance(30, 30, Image.SCALE_SMOOTH);
        } catch (IOException e) {
            System.out.println("FAILED TO LOAD IMAGE" + e);
        }
        initComponents();
        update();
    }
    
    /**
     * Updates the state of the UI grid panel.
     */
    public void update() {
        Position pos = new Position(game.getIsland(), rows, columns);
        GridSquare gs = game.getIsland().getGridSquare(pos);
        
        setBackground(Color.BLACK);
        repaint();
    }
    
    @Override
    /**
     * Overrides the grid panel with specific images
     * @param g updates the image that was loaded
     */ 
    public void paintComponent(Graphics g){
        super.paintComponent(g);
        Position pos = new Position(game.getIsland(), rows, columns);
        GridSquare gs = game.getIsland().getGridSquare(pos);

        if(gs.isExplored() || gs.isVisible()) {
            if(gs.getTerrain() == Terrain.MOUNTAIN)
                g.drawImage(mountainImage, 0, 0, this);
            if(gs.getTerrain() == Terrain.SAND)
                g.drawImage(sandImage, 0, 0, this);
            if(gs.getTerrain() == Terrain.WATER)
                g.drawImage(waterImage, 0, 0, this);
            if(gs.getTerrain() == Terrain.FOREST)
                g.drawImage(forestImage, 0, 0, this);
            if(gs.getOccupantStringRepresentation().equals("A") || gs.getOccupantStringRepresentation().equals("a"))
            g.drawImage(animalImage, 8, 0, this);
            if(gs.getOccupantStringRepresentation().equals("F") || gs.getOccupantStringRepresentation().equals("T"))
            g.drawImage(itemImage, 20, 10, this);
        }
        
        if(gs.hasPlayer())
            g.drawImage(playerImage, 20, 0, this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
